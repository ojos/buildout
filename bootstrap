#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import json
import os
import shutil
import subprocess
import sys
import tempfile
import time
import urllib2
import yaml

config_path = './buildout.cfg'
playbook_content = r"""
- hosts: localhost
  become: no
  environment:
    HOMEBREW_CASK_OPTS: "--appdir=/Applications"
  roles:
    - homebrew-cask
"""


def _loading(current=None):
    loading_frames = ['|', '/', '-', '\\']
    current = 0 if current is None or current == len(loading_frames) - 1 else current + 1
    sys.stdout.write("\rwaiting : %s" % loading_frames[current])
    sys.stdout.flush()
    return current


def _install_CLT():
    print 'install command line tools...'

    subprocess.Popen(['xcode-select', '--install'],
                     stdin=subprocess.PIPE,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE,
                     shell=False)
    progress = None

    while True:
        p = subprocess.Popen(['gcc', '-v'],
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             shell=False)
        if p.wait() == 0:
            print 'command line tools had been installed!!'
            break
        else:
            progress = _loading(progress)
            time.sleep(0.5)


def _install_homebrew(url):
    print 'install homebrew...'

    res = urllib2.urlopen(url)
    codes = res.read()
    subprocess.call(['ruby', '-e', codes], shell=False)


def _change_zsh():
    print 'change login shell...'

    if os.environ['SHELL'] != '/bin/zsh':
        subprocess.call(['chsh', '-s', '/bin/zsh'], shell=False)
    else:
        print 'login shell had been changed!!'


def _install_pip(url):
    try:
        import pip
    except:
        print 'install pip...'

        res = urllib2.urlopen(url)
        codes = res.read()
        fh = tempfile.NamedTemporaryFile()
        fh.write(codes)
        fh.flush()
        subprocess.call(['sudo', 'python', fh.name], shell=False)


def _install_ansible():
    try:
        import ansible
    except:
        print 'install ansible from pip...'
        subprocess.call(['sudo', 'pip', 'install', 'ansible'], shell=False)


def _clone_ansible_roles(roles_repository):
    extra_role_dir = './roles'
    if os.path.exists(extra_role_dir):
        print 'remove extra roles dir...'
        shutil.rmtree('./roles')

    subprocess.call(['git', 'clone', roles_repository, 'roles'], shell=False)


def _excute_ansible_playbook(config, passward, debug, restore):
    config_fh = tempfile.NamedTemporaryFile()
    config_fh.write(config['ansible']['config'])
    config_fh.flush()
    os.environ["ANSIBLE_CONFIG"] = config_fh.name

    import ansible
    from ansible.inventory import Inventory
    from ansible.playbook import PlayBook

    stats = ansible.callbacks.AggregateStats()
    kwargs = {'stats': stats,
              'callbacks': ansible.callbacks.PlaybookCallbacks(),
              'runner_callbacks': ansible.callbacks.PlaybookRunnerCallbacks(stats),
              'inventory': ansible.inventory.Inventory(['localhost']),
              'extra_vars': {'homebrew_repositories': config['homebrew']['repositories'],
                             'homebrew_packages': config['homebrew']['packages'],
                             'homebrew_cask_packages': config['homebrew_cask']['packages'],
                             'osx_restore_time_machine': restore,
                             'ansible_connection': 'local'}}

    playbook_yml = config['ansible']['playbook_template']
    if debug:
        playbook_yml[0]['roles'] = config['ansible']['playbook_roles']['debug']
    elif passward:
        playbook_yml[0]['roles'] = config['ansible']['playbook_roles']['advance']
        kwargs['vault_password'] = passward
    else:
        playbook_yml[0]['roles'] = config['ansible']['playbook_roles']['basic']

    playbook_fh = tempfile.NamedTemporaryFile()
    playbook_fh.write(yaml.dump(playbook_yml))
    playbook_fh.flush()
    kwargs['playbook'] = playbook_fh.name
    playbook = ansible.playbook.PlayBook(**kwargs)

    try:
        playbook.run()
    except Exception as e:
        print 'Ansible Error: %s' % e.message


def _main(config, passward, debug, restore):
    _install_CLT()
    _install_homebrew(config['homebrew']['url'])
    _change_zsh()
    _install_pip(config['pip']['url'])
    _install_ansible()
    _clone_ansible_roles(config['ansible']['roles_repository'])
    _excute_ansible_playbook(config, passward, debug, restore)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=u'Build environment on OSX')
    parser.add_argument('-c', '--config',
                        action='store',
                        default=config_path,
                        type=str,
                        help='Configuration file path (default: %s)' % config_path)
    parser.add_argument('-d', '--debug',
                        action='store_true',
                        default=False,
                        help='Debug flag (default: Fasle)')
    parser.add_argument('-p', '--passward',
                        action='store',
                        help='Personal playbook execution flag (default: Fasle)')
    parser.add_argument('-r', '--restore',
                        action='store_true',
                        default=False,
                        help='Restore from the time machine flag (default: Fasle)')
    args = parser.parse_args()

    with open(args.config, 'r') as file:
        config = yaml.load(file)

    _main(config, args.passward, args.debug, args.restore)
