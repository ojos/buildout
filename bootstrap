#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import division, print_function, absolute_import, unicode_literals

import argparse
import json
import os
import shutil
import subprocess
import sys
import tempfile
import time

try:
    import configparser
except:
    import ConfigParser as configparser

try:
    from urllib import request as urllib2
except:
    import urllib2


config_path = './osx/general.yml'
homebrew_url = 'https://raw.githubusercontent.com/Homebrew/install/master/install'
pip_url = 'https://bootstrap.pypa.io/get-pip.py'


def _loading(current=None):
    loading_frames = ['|', '/', '-', '\\']
    current = 0 if current is None or current == len(loading_frames) - 1 else current + 1
    sys.stdout.write("\rwaiting : %s" % loading_frames[current])
    sys.stdout.flush()
    return current


def _install_CLT():
    print('install command line tools...')

    subprocess.Popen(['xcode-select', '--install'],
                     stdin=subprocess.PIPE,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE,
                     shell=False)
    progress = None

    while True:
        p = subprocess.Popen(['gcc', '-v'],
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             shell=False)
        if p.wait() == 0:
            print('command line tools had been installed!!')
            break
        else:
            progress = _loading(progress)
            time.sleep(0.5)


def _install_homebrew(url):
    print('install homebrew...')

    res = urllib2.urlopen(url)
    codes = res.read()
    subprocess.call(['ruby', '-e', codes], shell=False)


def _change_zsh():
    print('change login shell...')

    if os.environ['SHELL'] != '/bin/zsh':
        subprocess.call(['chsh', '-s', '/bin/zsh'], shell=False)
    else:
        print('login shell had been changed!!')


def _install_pip(url):
    try:
        import pip
    except:
        print('install pip...')

        res = urllib2.urlopen(url)
        codes = res.read()
        fh = tempfile.NamedTemporaryFile()
        fh.write(codes)
        fh.flush()
        subprocess.call(['sudo', 'python', fh.name], shell=False)


def _install_ansible():
    try:
        import ansible
    except:
        print('install ansible from pip...')
        subprocess.call(['sudo', 'pip', 'install', 'ansible'], shell=False)


def _clean_ansible_roles(roles_dir):
    if os.path.exists(roles_dir):
        print('remove roles dir...')
        shutil.rmtree(roles_dir)


def _clone_ansible_roles(roles_repository, roles_dir):
    _clean_ansible_roles(roles_dir)

    subprocess.call(['git', 'clone', roles_repository, roles_dir], shell=False)


def _generate_ansible_config(config):
    fp = tempfile.NamedTemporaryFile()
    fp.write(config['ansible']['config']['ini'].encode('utf-8'))
    fp.flush()

    conf = configparser.SafeConfigParser()
    conf.read(fp.name)

    if conf.has_option('defaults', 'roles_path'):
        roles = conf.get('defaults', 'roles_path').split(':')
    else:
        roles = []
    roles.extend([role['directory'] for role in config['ansible']['config']['roles_path']])
    conf.set('defaults', 'roles_path', ':'.join(roles))

    with open(config['ansible']['config']['path'], "w") as fh:
        conf.write(fh)

    return config['ansible']['config']['path']


def _excute_ansible_playbook(config_path, playbook_path):
    import yaml

    with open(config_path, 'r') as file:
        config = yaml.load(file)

    for role in config['ansible']['config']['roles_path']:
        _clone_ansible_roles(role['repository'], role['directory'])

    os.environ["ANSIBLE_CONFIG"] = _generate_ansible_config(config)

    inventory = tempfile.NamedTemporaryFile()
    inventory.write(config['ansible']['inventory'].encode('utf-8'))
    inventory.flush()

    if playbook_path is None:
        playbook = tempfile.NamedTemporaryFile()
        playbook.write(yaml.dump(config['ansible']['playbook']).encode('utf-8'))
        playbook.flush()
        playbook_path = playbook.name

    args = ['ansible-playbook', '-i', inventory.name]
    if 'options' in config['ansible']:
        args.extend(config['ansible']['options'])
    args.append(playbook_path)

    from ansible.cli.playbook import PlaybookCLI
    try:
        cli = PlaybookCLI(args)
        cli.parse()
        sys.exit(cli.run())
    except Exception as exception:
        print(exception.message)


def _main(config_path, playbook_path):
    _install_CLT()
    _install_homebrew(homebrew_url)
    _install_pip(pip_url)
    _install_ansible()
    _excute_ansible_playbook(config_path, playbook_path)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=u'Build environment on OSX')
    parser.add_argument('-c', '--config',
                        action='store',
                        default=config_path,
                        type=str,
                        help='Configuration file path (default: %s)' % config_path)
    parser.add_argument('-p', '--playbook',
                        action='store',
                        default=None,
                        type=str,
                        help='Override the playbook of the configuration file')
    args = parser.parse_args()
    _main(args.config, args.playbook)
