#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import ConfigParser
import json
import os
import shutil
import subprocess
import sys
import time
import urllib2

config_path = './buildout.cfg'
config = None


def _loading(current=None):
    loading_frames = ['|', '/', '-', '\\']
    current = 0 if current is None or current == len(loading_frames) - 1 else current + 1
    sys.stdout.write("\rwaiting : %s" % loading_frames[current])
    sys.stdout.flush()
    return current


def _install_CLT():
    subprocess.Popen(['xcode-select', '--install'],
                     stdin=subprocess.PIPE,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE,
                     shell=False)
    progress = None

    while True:
        p = subprocess.Popen(['gcc', '-v'],
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             shell=False)
        if p.wait() == 0:
            print 'command line tools had been installed!!'
            break
        else:
            progress = _loading(progress)
            time.sleep(0.5)


def _install_homebrew():
    res = urllib2.urlopen(config.get('homebrew', 'url'))
    codes = res.read()
    subprocess.call(['ruby', '-e', codes], shell=False)


def _install_ansible():
    subprocess.call(['brew', 'install', 'ansible'], shell=False)


def _clone_ansible_roles():
    extra_role_dir = './ansible-roles'
    if os.path.exists(extra_role_dir):
        print 'remove extra roles dir...'
        shutil.rmtree('./ansible-roles')

    extra_roles_repository = config.get('ansible', 'extra_roles_repository')
    subprocess.call(['git', 'clone', extra_roles_repository, 'ansible-roles'], shell=False)


def _change_zsh():
    if os.environ['SHELL'] != '/bin/zsh':
        subprocess.call(['chsh', '-s', '/bin/zsh'], shell=False)


def _excute_ansible_playbook(personal, debug, restore):
    extra_vars = {"homebrew_repositories":
                  config.get('homebrew', 'repositories').strip().split('\n'),
                  "homebrew_packages":
                  config.get('homebrew', 'packages').strip().split('\n'),
                  "homebrew_cask_packages":
                  config.get('homebrew_cask', 'packages').strip().split('\n'),
                  "personal_restore_time_machine": restore}
    extra_vars_json = json.dumps(extra_vars)

    if debug:
        cmd = ['ansible-playbook', '-i', 'hosts', './debug.yml',
               '--extra-vars', extra_vars_json]
    elif personal:
        cmd = ['ansible-playbook', '-i', 'hosts', './personal.yml',
               '--extra-vars', extra_vars_json, '--ask-vault-pass']
    else:
        cmd = ['ansible-playbook', '-i', 'hosts', './basic.yml',
               '--extra-vars', extra_vars_json]
    subprocess.call(cmd, shell=False)


def _main(personal, debug, restore):
    _install_CLT()
    _install_homebrew()
    _install_ansible()
    _clone_ansible_roles()
    _change_zsh()
    _excute_ansible_playbook(personal, debug, restore)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=u'Build environment on OSX')
    parser.add_argument('-c', '--config',
                        action='store',
                        default=config_path,
                        type=str,
                        help='Configuration file path (default: %s)' % config_path)
    parser.add_argument('-d', '--debug',
                        action='store_true',
                        default=False,
                        help='Debug flag (default: Fasle)')
    parser.add_argument('-p', '--personal',
                        action='store_true',
                        default=False,
                        help='Personal playbook execution flag (default: Fasle)')
    parser.add_argument('-r', '--restore',
                        action='store_true',
                        default=False,
                        help='Restore from the time machine flag (default: Fasle)')
    args = parser.parse_args()

    config = ConfigParser.SafeConfigParser()
    config.read(args.config)
    _main(args.personal, args.debug, args.restore)
